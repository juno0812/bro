
##! Functions for peering and various messaging patterns.

%%{
#include "broker/Manager.h"
#include "logging/Manager.h"
%%}

module Broker;

type Broker::EventArgs: record;

## Create a data structure that may be used to send a remote event via
## :bro:see:`Broker::send_event`.
##
## args: an event, followed by a list of argument values that may be used
##       to call it.
##
## Returns: opaque communication data that may be used to send a remote
##          event.
function Broker::event_args%(...%): Broker::EventArgs
	%{
	auto rval = broker_mgr->MakeEventArgs(@ARGS@);
	return rval;
	%}

function Broker::__event%(topic: string, args: Broker::EventArgs%): bool
	%{
	auto rval = broker_mgr->Event(topic->CheckString(), args->AsRecordVal());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__auto_event%(topic: string, ev: any%): bool
	%{
	auto rval = broker_mgr->AutoEvent(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__auto_event_stop%(topic: string, ev: any%): bool
	%{
	auto rval = broker_mgr->AutoEventStop(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__subscribe_to_events%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->SubscribeToEvents(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__unsubscribe_to_events%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->UnsubscribeToEvents(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__enable_remote_logs%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->EnableRemoteLogs(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__disable_remote_logs%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->DisableRemoteLogs(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__remote_logs_enabled%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->RemoteLogsAreEnabled(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__subscribe_to_logs%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->SubscribeToLogs(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__unsubscribe_to_logs%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->UnsubscribeToLogs(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}
